# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:22.04
Stage: build

%files
    . /planner
    $IPC_THIRD_PARTY/cplex_studio2211.linux_x86_64.bin cplex.bin

%post
    ## Install all necessary dependencies.
    apt-get update
    apt-get -y install --no-install-recommends cmake pypy3 make g++ zlib1g-dev

    ## Clear build directory.
    rm -rf /planner/builds

    ## Build CPLEX.
    ./cplex.bin -DLICENSE_ACCEPTED=TRUE -i silent
    export DOWNWARD_CPLEX_ROOT=/opt/ibm/ILOG/CPLEX_Studio2211/cplex/

    ## Build OSI.
    cd /planner/third-party/
    tar xvzf Osi-0.107.9.tgz
    cd Osi-0.107.9
    export DOWNWARD_COIN_ROOT=/opt/coin/Osi-0.107.9
    ./configure CC="gcc" CFLAGS="-pthread -Wno-long-long" CXX="g++" \
        CXXFLAGS="-pthread -Wno-long-long" \
        LDFLAGS="-L$DOWNWARD_CPLEX_ROOT/lib/x86-64_linux/static_pic" \
        --without-lapack --enable-static=no \
        --prefix="$DOWNWARD_COIN_ROOT" \
        --disable-bzlib \
        --with-cplex-incdir=$DOWNWARD_CPLEX_ROOT/include/ilcplex \
        --with-cplex-lib="-lcplex -lm -ldl"
    make
    make install
    cd ..
    rm -rf Osi-0.107.9
    cd ../..

    ## Build the planner.
    cd /planner
    pypy3 build.py "ipc23_opt" -j4
    strip --strip-all /planner/builds/ipc23_opt/bin/downward


# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:22.04
Stage: run

# Copy planner binary and required files from Stage 1.
%files from build
    /planner/fast-downward.py
    /planner/builds/ipc23_opt/bin/
    /planner/driver
    /opt/ibm/ILOG/CPLEX_Studio2211/cplex/
    /opt/coin/

%post
    ## Install only dependencies for running the planner.
    apt-get update
    apt-get -y install --no-install-recommends pypy3
    ## Remove unnecessary files to keep the image small.
    rm -rf /var/lib/apt/lists/*


# The runscript is called whenever the container is used to solve an instance.
%runscript
    DOMAINFILE="$1"
    PROBLEMFILE="$2"
    PLANFILE="$3"

    pypy3 /planner/fast-downward.py \
        --build "ipc23_opt" \
        --plan-file "$PLANFILE" \
        --alias "dalai-opt-2023" \
        "$DOMAINFILE" \
        "$PROBLEMFILE"

## Define meta data
%labels
Name        DALAI 2023 Optimal
Description Disjunctive Action Landmarks All In -- Path-dependent landmark heuristic search tailored to find optimal solutions.
Authors     Clemens Büchner <clemens.buechner@unibas.ch>, Remo Christen <remo.christen@unibas.ch>, Salomé Eriksson <salome.eriksson@unibas.ch>, Thomas Keller <tho.keller@unibas.ch>
License     GPL 3
Tracks      optimal
SupportsDerivedPredicates                       yes
SupportsUniversallyQuantifiedPreconditions      yes
SupportsExistentiallyQuantifiedPreconditions    yes
SupportsUniversallyQuantifiedEffects            yes
SupportsNegativePreconditions                   yes
SupportsEqualityPreconditions                   yes
SupportsInequalityPreconditions                 yes
SupportsConditionalEffects                      no
SupportsImplyPreconditions                      yes

